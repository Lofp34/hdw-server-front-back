// Fonction serverless Vercel pour la recherche de prospects LinkedIn
module.exports = async function handler(req, res) {
  try {
    // Configuration CORS pour Vercel
    res.setHeader('Access-Control-Allow-Credentials', true);
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET,DELETE,PATCH,POST,PUT');
    res.setHeader(
      'Access-Control-Allow-Headers',
      'X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version'
    );

    if (req.method === 'OPTIONS') {
      res.status(200).end();
      return;
    }

    if (req.method !== 'POST') {
      res.status(405).json({ error: 'M√©thode non autoris√©e' });
      return;
    }

    // Log pour debug
    console.log('Requ√™te re√ßue:', { method: req.method, body: req.body });

    const { nom } = req.body || {};

    // Configuration de l'API Horizon Data Wave
    const API_KEY = process.env.HDW_ACCESS_TOKEN;
    const ACCOUNT_ID = process.env.HDW_ACCOUNT_ID;

    console.log('Variables env:', { 
      hasApiKey: !!API_KEY, 
      hasAccountId: !!ACCOUNT_ID 
    });

    if (!API_KEY) {
      console.error('HDW_ACCESS_TOKEN manquant');
      res.status(500).json({ error: 'HDW_ACCESS_TOKEN manquant' });
      return;
    }

    const API_CONFIG = {
      BASE_URL: "https://api.horizondatawave.ai",
      ENDPOINTS: {
        SEARCH_USERS: "/api/linkedin/search/users"
      }
    };

    // Fonction pour faire les requ√™tes vers l'API HDW avec timeout
    async function makeRequest(endpoint, data, timeout = 10000) {
      const baseUrl = API_CONFIG.BASE_URL.replace(/\/+$/, "");
      const url = baseUrl + (endpoint.startsWith("/") ? endpoint : `/${endpoint}`);
      const headers = {
        "Content-Type": "application/json",
        "access-token": API_KEY
      };

      console.log('üåê Appel API HDW:', { url, data });

      // Cr√©er un contr√¥leur d'abandon pour le timeout
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), timeout);

      try {
        const response = await fetch(url, {
          method: "POST",
          headers,
          body: JSON.stringify(data),
          signal: controller.signal
        });

        clearTimeout(timeoutId);

        if (!response.ok) {
          const errorData = await response.json().catch(() => ({}));
          console.error('‚ùå Erreur API HDW:', { status: response.status, errorData });
          throw new Error(`API error: ${response.status} ${errorData.message || response.statusText}`);
        }

        const result = await response.json();
        console.log('‚úÖ R√©ponse API HDW re√ßue pour:', endpoint);
        return result;
      } catch (error) {
        clearTimeout(timeoutId);
        if (error.name === 'AbortError') {
          throw new Error(`Timeout apr√®s ${timeout}ms pour ${endpoint}`);
        }
        throw error;
      }
    }

    const searchParams = {
      keywords: nom || '',
      count: 1,
      timeout: 300
    };

    console.log('Param√®tres de recherche:', searchParams);

    const results = await makeRequest(API_CONFIG.ENDPOINTS.SEARCH_USERS, searchParams);

    console.log('üîç R√©sultats bruts re√ßus:', JSON.stringify(results, null, 2));
    console.log('üìä Type de r√©sultats:', typeof results);
    console.log('üìä Est-ce un array?', Array.isArray(results));
    console.log('üìä Longueur:', results?.length);

    if (results && results.length > 0) {
      console.log('‚úÖ Utilisateur trouv√©, traitement en cours...');
      const user = results[0];
      
      // R√©cup√©ration du profil d√©taill√©
      let detailedProfile = null;
      let userPosts = null;
      let userReactions = null;
      let emailInfo = null;
      
      try {
        console.log('üîç R√©cup√©ration des donn√©es d√©taill√©es...');
        
        // 1. Profil d√©taill√© avec exp√©rience, √©ducation, comp√©tences
        const userUrn = user.urn?.value || user.urn;
        console.log('üîç V√©rification URN utilisateur:', userUrn || 'URN manquant');
        if (userUrn) {
          console.log('üìã R√©cup√©ration du profil d√©taill√© pour:', userUrn);
          try {
            detailedProfile = await makeRequest('/api/linkedin/get/profile', {
              user: userUrn,
              with_experience: true,
              with_education: true,
              with_skills: true
            }, 8000); // Timeout 8 secondes
            console.log('‚úÖ Profil d√©taill√© r√©cup√©r√©:', detailedProfile);
          } catch (error) {
            console.log('‚ö†Ô∏è Erreur profil d√©taill√©:', error.message);
          }
        }
        
        // 2. Posts r√©cents de l'utilisateur
        if (userUrn) {
          console.log('üìù R√©cup√©ration des posts pour:', userUrn);
          try {
            userPosts = await makeRequest('/api/linkedin/get/user/posts', {
              urn: userUrn,
              count: 5
            }, 6000); // Timeout 6 secondes
            console.log('‚úÖ Posts r√©cup√©r√©s:', userPosts?.length || 0);
          } catch (error) {
            console.log('‚ö†Ô∏è Erreur posts:', error.message);
          }
        }
        
        // 3. R√©actions r√©centes
        if (userUrn) {
          console.log('üëç R√©cup√©ration des r√©actions pour:', userUrn);
          try {
            userReactions = await makeRequest('/api/linkedin/get/user/reactions', {
              urn: userUrn,
              count: 5
            }, 6000); // Timeout 6 secondes
            console.log('‚úÖ R√©actions r√©cup√©r√©es:', userReactions?.length || 0);
          } catch (error) {
            console.log('‚ö†Ô∏è Erreur r√©actions:', error.message);
          }
        }
        
        // 4. Recherche par email si disponible
        if (user.email) {
          console.log('üìß Recherche par email:', user.email);
          try {
            emailInfo = await makeRequest('/api/linkedin/get/email/user', {
              email: user.email,
              count: 1
            });
            console.log('‚úÖ Email info r√©cup√©r√©:', emailInfo);
          } catch (error) {
            console.log('‚ö†Ô∏è Erreur email lookup:', error.message);
          }
        }
        
        console.log('üéâ R√©cup√©ration des donn√©es d√©taill√©es termin√©e');
        
      } catch (error) {
        console.log('‚ùå Erreur g√©n√©rale lors de la r√©cup√©ration des donn√©es d√©taill√©es:', error.message);
      }

      // Debug: affichons la structure exacte des donn√©es re√ßues
      console.log('üîç Structure des donn√©es utilisateur:', JSON.stringify(user, null, 2));
      console.log('üìã Structure du profil d√©taill√©:', JSON.stringify(detailedProfile, null, 2));
      console.log('üìù Structure des posts:', JSON.stringify(userPosts, null, 2));
      console.log('üëç Structure des r√©actions:', JSON.stringify(userReactions, null, 2));
      
      // Construction de la r√©ponse compl√®te avec gestion des champs manquants
      const response = {
        // Informations de base (avec fallbacks)
        nom: user.name || user.fullName || user.displayName || "Nom non disponible",
        headline: user.headline || user.title || user.jobTitle || user.description || "Titre non disponible",
        location: user.location || user.geoLocation || user.area || "Localisation non disponible",
        url: user.url || user.profileUrl || user.linkedinUrl || "",
        image: user.image || user.profileImage || user.avatar || "",
        urn: userUrn || user.urn?.value || user.urn || user.id || "",
        
        // Informations de contact
        email: emailInfo?.[0]?.email || user.email || "",
        telephone: emailInfo?.[0]?.phone || user.phone || "",
        
        // Profil d√©taill√© (avec gestion des structures diff√©rentes)
        experience: detailedProfile?.experience || detailedProfile?.workExperience || detailedProfile?.positions || [],
        education: detailedProfile?.education || detailedProfile?.schools || detailedProfile?.academicBackground || [],
        skills: detailedProfile?.skills || detailedProfile?.endorsements || detailedProfile?.expertise || [],
        
        // Activit√© r√©cente
        posts: userPosts || [],
        reactions: userReactions || [],
        
        // Statistiques
        postCount: userPosts?.length || 0,
        reactionCount: userReactions?.length || 0,
        experienceCount: (detailedProfile?.experience || detailedProfile?.workExperience || detailedProfile?.positions || []).length,
        educationCount: (detailedProfile?.education || detailedProfile?.schools || detailedProfile?.academicBackground || []).length,
        skillsCount: (detailedProfile?.skills || detailedProfile?.endorsements || detailedProfile?.expertise || []).length,
        
        // M√©tadonn√©es
        lastUpdated: new Date().toISOString(),
        searchQuery: nom || ""
      };
      
      console.log('R√©ponse compl√®te envoy√©e:', response);
      res.status(200).json(response);
    } else {
      console.log('‚ùå Aucun prospect trouv√© dans les r√©sultats');
      console.log('üîç R√©sultats re√ßus:', results);
      res.status(200).json({ message: "Aucun prospect trouv√©." });
    }
  } catch (error) {
    console.error('Erreur compl√®te:', error);
    res.status(500).json({ 
      error: "Erreur lors de la recherche LinkedIn", 
      details: error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
}; 